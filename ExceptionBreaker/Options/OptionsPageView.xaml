<UserControl x:Class="ExceptionBreaker.Options.OptionsPageView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:options="clr-namespace:ExceptionBreaker.Options"
             xmlns:support="clr-namespace:ExceptionBreaker.Options.Support"
             mc:Ignorable="d" 
             d:DesignHeight="500" d:DesignWidth="500">
  <Grid>
    <Grid.Resources>
      <options:RegexValidationRule x:Key="regexValidation" />
    </Grid.Resources>
    
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto" />
      <RowDefinition Height="Auto" />
      <RowDefinition />
      <RowDefinition Height="Auto" />
      <RowDefinition />
      <RowDefinition Height="Auto" />
    </Grid.RowDefinitions>

    <TextBlock Padding="5" Background="#fff6c4">
      This is a new feature, so it might not be perfectly reliable. Please
      <Hyperlink Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrush}}" NavigateUri="https://github.com/ashmind/ExceptionBreaker/issues">report any issues</Hyperlink>.
    </TextBlock>

    <DockPanel Grid.Row="1" DockPanel.Dock="Top" LastChildFill="True" DataContext="{Binding Path=(options:OptionsViewModel.IgnoredPatterns)}">
      <DockPanel.Resources>
        <Style TargetType="{x:Type Button}">
          <Setter Property="Margin" Value="5" />
          <Setter Property="BorderThickness" Value="0" />
          <Setter Property="Background" Value="Transparent" />
          <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}" />          
        </Style>

        <Style TargetType="{x:Type Image}">
          <Setter Property="Width" Value="16" />
          <Setter Property="Height" Value="16" />
          <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
              <Setter Property="Image.Opacity" Value="0.25" />
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </DockPanel.Resources>

      <Button Click="buttonDelete_Click"
              IsEnabled="{Binding Path=(options:PatternCollectionViewModel.CanDelete).Value}"
              DockPanel.Dock="Right">
        <Image Source="../Resources/Delete.png" />
      </Button>
      <Button Click="buttonAdd_Click"
              IsEnabled="{Binding Path=(options:PatternCollectionViewModel.CanAdd).Value}"
              DockPanel.Dock="Right"
              Margin="5 5 0 5">
        <Image Source="../Resources/Add.png" />
      </Button>
      <Label>Do not change break settings for exceptions matching (regex):</Label>
    </DockPanel>
    <ListBox Grid.Row="2" ItemsSource="{Binding Path=(options:PatternCollectionViewModel.Values)}" SelectedItem="{Binding Path=(options:PatternCollectionViewModel.Selected).Value}" DataContext="{Binding Path=(options:OptionsViewModel.IgnoredPatterns)}">
      <ListBox.Resources>
        <Style TargetType="{x:Type TextBox}">
          <Setter Property="BorderThickness" Value="0" />
          <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
              <ControlTemplate>
                <AdornedElementPlaceholder />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
              <Setter Property="TextBox.Foreground" Value="Red"/>
            </Trigger>
          </Style.Triggers>
        </Style>
      </ListBox.Resources>
      
      <ListBox.ItemContainerStyle>
        <Style TargetType="ListBoxItem">
          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
          <Setter Property="Padding" Value="0"/>
        </Style>
      </ListBox.ItemContainerStyle>
      <ListBox.ItemTemplate>
        <DataTemplate>
          <Border Padding="2" Margin="1" Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}">
            <DockPanel LastChildFill="True" FocusManager.FocusedElement="{Binding ElementName=text}">
              <CheckBox IsChecked="{Binding Path=(options:PatternViewModel.Enabled).Value}"
                        DockPanel.Dock="Left"
                        VerticalAlignment="Center"
                        Margin="0 0 2 0" />
              <TextBox x:Name="text"
                       VerticalAlignment="Center"
                       GotFocus="textPattern_OnGotFocus"
                       support:BindingDelay.List="{support:BindingDelay Property=TextBox.Text, Delay=500}">
                <TextBox.Style>
                  <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding Path=(options:PatternViewModel.Enabled).Value}" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </TextBox.Style>
                
                <TextBox.Text>
                  <Binding Path="(options:PatternViewModel.Pattern).Value" UpdateSourceTrigger="Explicit">
                    <Binding.ValidationRules>
                      <StaticResource ResourceKey="regexValidation" />
                    </Binding.ValidationRules>
                  </Binding>
                </TextBox.Text>
              </TextBox>
            </DockPanel>
          </Border>
        </DataTemplate>
      </ListBox.ItemTemplate>
    </ListBox>

    <TextBlock Grid.Row="3" Margin="5">Matching exceptions (preview, might not represent the full list):</TextBlock>
    <ScrollViewer Grid.Row="4" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto" Margin="10 0 0 0">
      <ItemsControl  Background="Transparent" ItemsSource="{Binding Path=(options:OptionsViewModel.ExceptionsMatchingIgnored)}">       
        <ItemsControl.Resources>
          <ControlTemplate x:Key="NotAvailableTemplate">
            <TextBlock>Preview is not available. This might happen if there is no open solution.</TextBlock>
          </ControlTemplate>
          <ControlTemplate x:Key="NoMatchesTemplate">
            <TextBlock>No exceptions match any of the above patterns.</TextBlock>
          </ControlTemplate>
        </ItemsControl.Resources>

        <ItemsControl.Style>
          <Style TargetType="{x:Type ItemsControl}">
            <Style.Triggers>
              <DataTrigger Value="0" Binding="{Binding (ItemsControl.Items).Count, RelativeSource={RelativeSource Self}}">
                <Setter Property="Template" Value="{StaticResource NoMatchesTemplate}" />
              </DataTrigger>
              <DataTrigger Value="0" Binding="{Binding (options:OptionsViewModel.AllExceptions).Value.Count}">
                <Setter Property="Template" Value="{StaticResource NotAvailableTemplate}" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ItemsControl.Style>

        <ItemsControl.ItemTemplate>
          <DataTemplate>
            <TextBlock Text="{Binding Path=(options:ExceptionViewModel.Name)}" Margin="0 0 0 4">
              <TextBlock.Style>
                <Style TargetType="{x:Type TextBlock}">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=(options:ExceptionViewModel.MatchesSelected).Value}" Value="True">
                      <Setter Property="FontWeight" Value="Bold" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </TextBlock.Style>
            </TextBlock>
          </DataTemplate>
        </ItemsControl.ItemTemplate>
      </ItemsControl>
    </ScrollViewer>
    <CheckBox Grid.Row="5" Margin="5" IsChecked="{Binding Path=(options:OptionsViewModel.ShowDiagnostics).Value}">
      Show diagnostics in output window
    </CheckBox>
  </Grid>
</UserControl>
